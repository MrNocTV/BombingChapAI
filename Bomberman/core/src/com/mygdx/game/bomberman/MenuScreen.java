package com.mygdx.game.bomberman;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.ScreenAdapter;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.math.Interpolation;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.actions.MoveToAction;
import com.badlogic.gdx.scenes.scene2d.ui.CheckBox;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.ImageButton;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener.ChangeEvent;
import com.badlogic.gdx.utils.Scaling;

public class MenuScreen extends ScreenAdapter{
	private Stage stage;
	private Table table;
	private Table howtoplayTable;
	private Skin skin;
	private Image screenBG;
	private Image gameTitle;
	private TextButton backButton;
	private ImageButton test;
	private TextButton howtoplayButton;
	private TextButton humanvsbotButton;
	private CheckBox muteCheckBox;
	private Bomberman g;
	
	public MenuScreen(Bomberman game) {
		stage = new Stage(game.viewport);
		g = game;
		Gdx.input.setInputProcessor(stage);
		skin = new Skin(Gdx.files.internal("uiskin.json"));
		screenBG = new Image(new Texture("title_background.jpg"));
		screenBG.setFillParent(true);
		gameTitle = new Image(new Texture("title_titletext.png"));
		gameTitle.setPosition(250, 300);
		
		table = new Table();
		howtoplayButton = new TextButton("How To Play", skin, "default");
		//howtoplayButton.setSize(200, 100);
		table.add(howtoplayButton).colspan(2).padBottom(10).row();
		humanvsbotButton = new TextButton("Man vs Bots", skin, "default");
		table.add(humanvsbotButton).colspan(2).padBottom(10).row();
		Label soundLabel = new Label("Sound:", skin);
		table.add(soundLabel).padRight(5);
		muteCheckBox = new CheckBox("Mute", skin);
		muteCheckBox.setChecked(true);
		g.mute = false;
		table.add(muteCheckBox);
		table.setPosition(550, -100);
		
		howtoplayTable = new Table();
		Label moveLabel1 = new Label("MOVE", skin);
		moveLabel1.setFontScale(1.5f);
		howtoplayTable.add(moveLabel1).padRight(10);
		howtoplayTable.setPosition(550, -100);
		Label moveLabel2 = new Label("Press up, down, left, right key to move\n"
				+ "Press space bar to place bomb", skin);
		howtoplayTable.add(moveLabel2).padLeft(50).row();
		Label ruleLabel1 = new Label("RULES", skin);
		ruleLabel1.setFontScale(1.5f);
		howtoplayTable.add(ruleLabel1).padRight(10);
		Label ruleLabel2 = new Label("Touch the flames generated by boms -> you die\n"
				+ "Touch the bots -> you die\n"
				+ "Lose 3 lives -> you lose\n"
				+ "Kill all bots -> you win",skin);
		howtoplayTable.add(ruleLabel2).padLeft(50).row();
		backButton = new TextButton("Back", skin);
		howtoplayTable.add(backButton).colspan(2).padTop(10);
		
		stage.addActor(screenBG);
		stage.addActor(gameTitle);
		stage.addActor(table);
		stage.addActor(howtoplayTable);
		
		humanvsbotButton.addListener(new ClickListener(){
			@Override
			public void clicked(InputEvent event, float x, float y) {
				g.setScreen(new GameScreen(g));
			}
		});
		
		muteCheckBox.addListener(new ChangeListener() {
			@Override
			public void changed(ChangeEvent event, Actor actor) {
				g.mute = muteCheckBox.isChecked();
			}
		});
		
		howtoplayButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y) {
				showMenu(false);
			}
		});
		
		backButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y) {
				showMenu(true);
			}
		});
	}
	
	@Override
	public void show() { 
		
		MoveToAction titleMove = new MoveToAction();
		titleMove.setPosition(250, 100);
		titleMove.setDuration(4);
		titleMove.setInterpolation(Interpolation.elasticOut);
		gameTitle.addAction(titleMove);
		
		showMenu(true);
	}
	
	@Override
	public void render(float deltaTime) {
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		stage.act(deltaTime);
		stage.draw();
	}
	
	private void showMenu(boolean flag) {
		MoveToAction action1 = new MoveToAction();
		action1.setPosition(550, 240);
		action1.setDuration(1.5f);
		action1.setInterpolation(Interpolation.swing);
		
		MoveToAction action2 = new MoveToAction();
		action2.setPosition(550, -100);
		action2.setDuration(1.f);
		action2.setInterpolation(Interpolation.swingIn);
		
		if(flag) {
			table.addAction(action1);
			howtoplayTable.addAction(action2);
		} else {
			table.addAction(action2);
			howtoplayTable.addAction(action1);
		}
		
	}
	
}
